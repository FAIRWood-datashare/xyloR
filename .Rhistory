)
),
# TAB 3: Upload Metadata -----------------------------------------------
nav_panel("Persons Info",
bslib::card()
),
# TAB 4: Upload Metadata -----------------------------------------------
nav_panel("Publications Info",
bslib::card()
)
)
)
pkgload::load_all()
xyloglobal_upload()
res <- httr::GET("https://api.open-notify.org/astros.json")
res = httr::GET("https://api.open-notify.org/astros.json")
res = httr::GET('https://api.ror.org/v2/organizations/00tjv0s33')
rawToChar(res$content)
jsonlite::fromJSON(rawToChar(res$content))
data <- jsonlite::fromJSON(rawToChar(res$content))
res <- httr::GET('https://api.ror.org/v2/organizations/03fyd9f03')
data <- jsonlite::fromJSON(rawToChar(res$content))
data$names
data$status
ror_res <- httr::GET('https://api.ror.org/v2/organizations?filter=status:active,country.country_code:CH')
data <- jsonlite::fromJSON(rawToChar(res$content))
data$names
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
data$number_of_results
data$items %>% head()
data$items$names %>% head()
ui <- shiny::fluidPage(
theme = bslib::bs_theme(primary = "#006268", font_scale = 0.8, bootswatch = "yeti"),
shinyjs::useShinyjs(),
shiny::titlePanel("GloboXylo: Contributing Data"),
navset_card_tab(id = 'tabs',
# TAB 1: Upload Observation Data -----------------------------------------
nav_panel(title = "Upload observation data",
shiny::fluidRow(
# Left Side: Upload Section (With Background Color)
shiny::column(3, class = "bg-light p-3 border-end",
bslib::card(
bslib::card_header('Name you dataset'),
bslib::card_body(
fillable = FALSE,
shiny::p("Enter the name of your dataset. This should not be more than 10 characters"),
textInput("dataset_name", "Enter the name of your dataset", value = ""),
actionButton("submit", "Validate name", class = "btn btn-primary")
)
),
bslib::card(
bslib::card_header('Download observation data template'),
bslib::card_body(
fillable = FALSE,
shiny::p("Click the button to download the template. Fill it in, save it, then browse and load the file."),
# shiny::actionButton("open_obs_temp", "Click to open data template!", class = "btn btn-primary"),
downloadButton("download_template", "Download Template", class = "btn btn-primary"),
# shiny::textOutput("obs_file_copied")
),
style = "display: none;",
id = "card_1"
),
bslib::card(
bslib::card_header('Upload the filled observation data file!'),
shiny::fileInput("obs_file", "", accept = c(".xlsx"), multiple = FALSE),
shiny::selectInput("site_filter", "Select Site", choices = NULL, selected = NULL, selectize = TRUE),                                                            style = "height: 300px; display: none;",
id = "card_2"
),
# Add a ReactTable of key info below the cards
bslib::card(
bslib::card_header("Key Information Table"),
bslib::card_body(
reactable::reactableOutput("key_info_table")
),
style = "display: none;",  # Hidden by default
id = "card_3"  # Add an ID to reference it later
)
),
# Right Side: Map & Plotly + Add Observations Table here
shiny::column(9,
bslib::card(
bslib::card_header("Geolocation Map"),
bslib::card_body(
leaflet::leafletOutput("mymap", height = "400px")
),
style = "display: none;",  # Hidden by default
id = "card_4"  # Add an ID to reference it later
),
bslib::card(
bslib::card_header("Data Coverage Overview"),
bslib::card_body(
plotly::plotlyOutput("data_coverage_plot", height = "300px")
),
style = "display: none;",  # Hidden by default
id = "card_5"  # Add an ID to reference it later
),
# Move Observations performed section here
bslib::card(
bslib::card_header("Observations performed [number of radial files]"),
bslib::card_body(
reactable::reactableOutput("obs_table")
),
style = "display: none;",  # Hidden by default
id = "card_6"  # Add an ID to reference it later
)
)
),
shiny::br(),
# Adding validation checkboxes and next button
shiny::fluidRow(
shiny::column(12,
bslib::card(
bslib::card_header("Data Validation"),
bslib::card_body(
shiny::checkboxInput("validate_location", "Validate Location", value = FALSE),
shiny::checkboxInput("validate_data_coverage", "Validate Data Coverage", value = FALSE),
shiny::checkboxInput("validate_observation", "Validate observation list", value = FALSE),
shiny::textOutput("validation_status"),
shiny::actionButton('next_btn', 'Next', icon = shiny::icon('angle-double-right'), class = "btn btn-primary", disabled = TRUE)
),
style = "display: none;",  # Hidden by default
id = "card_7"  # Add an ID to reference it later
)
)
)
),
# TAB 2: Upload Metadata -----------------------------------------------
nav_panel("Upload metadata",
shiny::fluidRow(
# Left side
shiny::column(3, class = "bg-light p-3 border-end",
bslib::card(
bslib::card_header('Download prefilled metadata template'),
bslib::card_body(
fillable = FALSE,
shiny::p("Click to open, prefill, and download the metadata template, prefilled with data from the observations file"),
shiny::p("Complete the prefilled metadata, save it again, and then browse to load the filled file for format check."),
shiny::p("Note: It may take a few seconds for the prefilled template to open.", style = "color: red;"),
#shiny::actionButton("open_meta_temp", "Click to open meta template!", class = "btn btn-primary"),
#shiny::textOutput("meta_file_copied"),
downloadButton("download_meta_template", "Download Metadata Template", class = "btn btn-primary")
)
),
bslib::card(
bslib::card_header('Load the completed metadata file (you just saved!) to perform validation'),
bslib::card_body(
shiny::fileInput("meta_file", "", accept = c(".xlsx")),
# actionButton("validate_meta", "Validate Metadata", class = "btn btn-success"),
shiny::textOutput("meta_validation_status"),
shiny::verbatimTextOutput("meta_validation_errors")
)
)
),
# Right side (New ReactTable)
shiny::column(9,
bslib::card(
bslib::card_header("Overview of data structure"),
bslib::card_body(
plotly::plotlyOutput("hierarchical_structure", height = "400px")
),
bslib::card_body(
reactable::reactableOutput("meta_table")  # ReactTable placeholder
)
),
bslib::card(
bslib::card_header("Report of validation check!"),
bslib::card_body(
reactable::reactableOutput("validation_table"),
shiny::uiOutput("validation_message")
),
style = "display: none;",  # Hidden by default
id = "card_8"  # Add an ID to reference it later
)
),
),
shiny::br(),
shiny::fluidRow(
shiny::column(12,
bslib::card(
class = "border border-0 text-center",
# shiny::actionButton('submit_btn', 'Create exchange files', disabled = TRUE, icon = shiny::icon('angle-double-right'), class = "btn btn-primary"),
downloadButton("download_zip", "Download Exchange Files as ZIP", class = "btn btn-primary"),
# Modal for submission feedback
shiny::uiOutput("modal_ui")
)
)
)
),
# TAB 3: Upload Metadata -----------------------------------------------
nav_panel("Persons Info",
bslib::card()
),
# TAB 4: Upload Metadata -----------------------------------------------
nav_panel("Publications Info",
bslib::card()
)
)
)
pkgload::load_all()
xyloglobal_upload()
runApp('R/ROR_app.R')
runApp('R/ROR_app.R')
runApp('R/ROR_app.R')
runApp('R/ROR_app.R')
runApp('R/ROR_app.R')
runApp('R/ROR_app.R')
runApp('R/ROR_app.R')
runApp('R/ROR_app.R')
URLencode('he du')
search_string <- 'ETH'
search_url <- paste0('https://api.ror.org/organizations?affiliation=', URLencode(search_string))
ror_res <- httr::GET(search_url)
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
data$items
paste0('https://api.ror.org/organizations?affiliation=', URLencode(search_string))
ror_res <- httr::GET('https://api.ror.org/v2/organizations?affiliation=ETH')
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
View(data)
ror_res <- httr::GET('https://api.ror.org/v2/organizations?affiliation=landschaft')
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
ror_res <- httr::GET('https://api.ror.org/v2/organizations?affiliation=university+of+wisconsin+madison')
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
data
ror_res <- httr::GET('https://api.ror.org/v2/organizations?affiliation=university+of+wisconsin')
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
ror_res <- httr::GET('https://api.ror.org/v2/organizations?affiliation=eth')
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
search_string <- 'eidgenÃ¶ssische'
search_url <- paste0('https://api.ror.org/v2/organizations?affiliation=', URLencode(search_string))
ror_res <- httr::GET(search_url)
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
data$items$organization
search_string <- 'swiss federal'
search_country <- 'CH'
search_url <- paste0('https://api.ror.org/v2/organizations?affiliation=', URLencode(search_string))
ror_res <- httr::GET(search_url)
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
data$items$organization
data$items$organization$names
data$items$organization$names
data$items$chosen
search_url <- paste0('https://api.ror.org/v2/organizations?query=', URLencode(search_string),'&filter=',search_country)
search_url
search_string <- 'eth'
search_country <- 'CH'
search_url <- paste0('https://api.ror.org/v2/organizations?query=', URLencode(search_string),'&filter=country.country_code:',search_country)
ror_res <- httr::GET(search_url)
data <- jsonlite::fromJSON(rawToChar(ror_res$content))
data$items
data$items$names
data$items$names %>% bind_rows()
ror_data$items$names %>% dplyr::bind_rows() %>% dplry::filter(lang  == 'en ror_display')
ror_data$items$names %>% dplyr::bind_rows() %>% dplyr::filter(lang  == 'en ror_display')
search_string <- 'eth'
search_country <- 'CH'
search_url <- paste0('https://api.ror.org/v2/organizations?query=', URLencode(search_string),'&filter=country.country_code:',search_country)
ror_res <- httr::GET(search_url)
ror_data <- jsonlite::fromJSON(rawToChar(ror_res$content))
ror_data$items$names %>% dplyr::bind_rows() %>% dplyr::filter(lang  == 'en ror_display')
ror_res <- httr::GET(search_url)
ror_data <- jsonlite::fromJSON(rawToChar(ror_res$content))
ror_res <- httr::GET(search_url)
ror_data <- jsonlite::fromJSON(rawToChar(ror_res$content))
ror_data$items$names %>% dplyr::bind_rows() %>% dplyr::filter(lang  == 'en ror_display')
ror_data$items$names %>% dplyr::bind_rows()
ror_data$items$names %>% dplyr::bind_rows() %>% dplyr::filter(lang  == 'en ror_display,')
res_names <- ror_data$items$names %>% dplyr::bind_rows()
res_names
res_names$lang
res_names$types
res_names <- ror_data$items$names %>% dplyr::bind_rows() %>% filter('ror_display' %in% types)
res_names
ror_data$items$names %>% dplyr::bind_rows()
ror_data$items$names %>% dplyr::bind_rows() %>% dplyr::select(types)
res_names <- ror_data$items$names %>% dplyr::bind_rows() %>% filter(grepl('ror_display', types))
res_names
res_names <- ror_data$items$names %>% dplyr::bind_rows() %>% filter(grepl('ror_display', types)) %>% dplyr::select(value)
res_names
res_names <- ror_data$items$names %>% dplyr::bind_rows() %>% filter(grepl('ror_display', types)) %>% dplyr::pull(value)
res_names
sprintf('https://api.ror.org/v2/organizations?query=%s&filter=country.country_code:%s',
URLencode(search_string),
search_country))
sprintf('https://api.ror.org/v2/organizations?query=%s&filter=country.country_code:%s',
URLencode(search_string),
search_country)
status_code()
runApp('R/ROR_app.R')
ror_data
runApp('R/ROR_app.R')
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
system.file("extdata", "country_ISO3166-1-alpha-2_20241205.csv", package = "xyloR")
iso_countries <- read.csv(file_path, stringsAsFactors = FALSE)
file_path <- system.file("extdata", "country_ISO3166-1-alpha-2_20241205.csv", package = "xyloR")
iso_countries <- read.csv(file_path, stringsAsFactors = FALSE)
View(iso_countries)
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
devtools::load_all()
xyloglobal_upload()
rm(list = ls())
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
devtools::load_all()
getwd()
getwd()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
xyloR::get_country_codes()
pkgload::load_all()
xyloR::get_country_codes()
devtools::check()
pkgload::load_all()
xyloglobal_upload()
install.packages('reactable')
xyloglobal_upload()
install.packages('reactable')
pkgload::load_all()
usethis::use_package('reactable')
pkgload::load_all()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
devtools::load_all(".")
renv::install('reactable')
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
file_path <- system.file("extdata", "country_ISO3166-1-alpha-2_20241205.csv", package = "xyloR")
iso_countries <- read.csv(file_path, stringsAsFactors = FALSE)
iso_countries
iso_countries <- read.csv(file_path, stringsAsFactors = FALSE, na.strings=c(""))
iso_countries
country_vector <- setNames(iso_countries$Code, paste(iso_countries$Name, "(", iso_countries$Code, ")", sep = ""))
country_vector
country_list <- setNames(iso_countries$Code,
paste(iso_countries$Code, " [",
iso_countries$Name, "]", sep = ""))
country_list
pkgload::load_all()
xyloglobal_upload()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
search_url <- sprintf(
'https://api.ror.org/v2/organizations?query=%s&filter=country.country_code:%s',
URLencode("eth"),
"CH")
ror_res <- httr::GET(search_url)
ror_data <- jsonlite::fromJSON(rawToChar(ror_res$content))
View(ror_data)
search_url <- sprintf(
'https://api.ror.org/v2/organizations?query=%s&filter=country.country_code:%s',
URLencode("xxxxxxxxxx"),
"CH")
ror_res <- httr::GET(search_url)
ror_data <- jsonlite::fromJSON(rawToChar(ror_res$content))
pkgload::load_all()
xyloglobal_upload()
search_url <- sprintf(
'https://api.ror.org/v2/organizations?query=%s&filter=country.country_code:%s',
URLencode("eth"),
"CH")
ror_data <- jsonlite::fromJSON(rawToChar(ror_res$content))
ror_res <- httr::GET(search_url)
ror_data <- jsonlite::fromJSON(rawToChar(ror_res$content))
names(ror_data)
str(ror_data$items)
names(ror_data$items)
ror_data$items$locations
ror_data$items$locations[[1]]
ror_data$items$names
str(ror_data$items$names)
ror_data$items$locations$
ror_data$items$locations
ror_data$items$locations %>% dplyr::bind_rows()
ror_data$items$locations %>% dplyr::bind_rows() %>% dplyr::pull(geonames_details.name)
ror_data$items$locations %>% dplyr::bind_rows() %>% dplyr::pull(geonames_details.name)
ror_data$items$locations %>% dplyr::bind_rows()
str(ror_data$items$locations %>% dplyr::bind_rows())
ror_data$items$locations %>% dplyr::bind_rows() %>% dplyr::pull(geonames_details)
ror_data$items$locations %>% dplyr::bind_rows() %>% dplyr::pull(geonames_details) %>% dplyr::pull(name)
ror_data$items$locations %>% dplyr::bind_rows() %>% dplyr::pull(geonames_details) %>% tidyr::unite(col = 'address', name, country_name)
ror_data$items$locations %>% dplyr::bind_rows() %>% dplyr::pull(geonames_details) %>% tidyr::unite(col = 'address', name, country_name, sep = ', ') %>% dplyr::pull(address)
ror_res <- httr::GET(search_url, timeout(3))
ror_res <- httr::GET(search_url, httr::timeout(3))
ror_data$items$id
# get the locations
res_locs <- ror_data$items$locations %>%
dplyr::bind_rows() %>%
dplyr::pull(geonames_details) %>%
tidyr::unite(col = 'address', name, country_name, sep = ', ') %>%
dplyr::pull(address)
# get the names (assuming that there is always exactly one ror_display name)
res_names <- ror_data$items$names %>%
dplyr::bind_rows() %>%
filter(grepl('ror_display', types)) %>%
dplyr::pull(value)
res_ror_ids <- ror_data$items$ids
# a dataframe of res_locs, res_names and res_ror_ids
res_df <- data.frame(res_locs, res_names, res_ror_ids)
res_locs
res_locs
res_ror_ids
ror_data$items$ids
res_ror_ids <- ror_data$items$id
# a dataframe of res_locs, res_names and res_ror_ids
res_df <- data.frame(res_locs, res_locs, res_ror_ids)
View(res_df)
View(res_df)
View(res_df)
View(res_df)
res_df
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
data.frame(ror_data$items$id, res_names, res_locs)
data.frame(ROR = ror_data$items$id, res_names, res_locs)
pkgload::load_all()
xyloglobal_upload()
tagList()
?tagList
span()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
renv::status()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
pkgload::load_all()
xyloglobal_upload()
